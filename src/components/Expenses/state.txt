 
 
  하지만 지금 바로 알아두셔야 할 것이 있습니다. 여러분의 컴포넌트는 함수형입니다 .그래서 리액트에게 어떤 것이 변경되었고 특정 컴포넌트가

  재평가되어야 한다고 말하는 방법이 필요합니다 .그래서 리액트는 state라는 특별한 개념을 도입합니다. 리액트에서는 그런 부분은 신경쓰지 않습니다

컴포넌트 함수에 변수를 갖고 있고 변수가 변경되었다고 해도 리액트는 무시하고 코드가 실행되어도 신경쓰지 않습니다
 
 
 
 
 
내가 호출한 컴포넌트 함수는 이 state를 업데이트 하는 함수이다. 그리고 useState로 상태를 초기화 했던 곳에서 다시 실행될 것입니다.

 If they are triggered upon an event,

 that you end with handler.







그리고 이것은 리액트에서 또다른 중요한 개념입니다
 만약 변화하는 데이터를 갖고 있는데
 그 변화하는 데이터가 사용자 인터페이스에
 반영되어야 한다면
 state가 필요합니다
 왜냐하면 일반적인 변수
 그리고 다른 컴포넌트는 빼고
 그 컴포넌트만 재평가할 것입니다
 이 state가 등록된 그 컴포넌트만요


UseState registers some State, so some value as a State for the component in which it is being called.


So if we change the title in the first ExpenseItem the other ones are not affected because they have their own State.
So we have separate States, even if we create a component more than once.



that State really is separated on a per component instance basis.



Basically we go to React and say, "Hey please give me that latest title State
which I told you to manage for me." And React provides us this latest State in this array which useState always returns.


Summary

In a nutshell, using State is simple though.

You just register State with useState,

you always get back two values;

the value itself and the updating function.

You call the updating function

whenever the State should change,

and you use that first element

whenever you wanna use the State value,

like here for outputting it in the JSX code.

And React, will do the rest

and it will re-execute the component function

and re-evaluate the JSX code therefore;

whenever the State changes.


That's State and that's an important concept

because it's State which adds reactivity to our application.

Without State, our user interface would never change.

But with State and with listening to events,

we can make sure that we can react to user input

and that such input can result

in a visible change on our screen.